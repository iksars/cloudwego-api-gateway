// Code generated by thriftgo (0.2.12). DO NOT EDIT.

package idlmanage

import (
	"context"
	"fmt"
)

type IDLEntity struct {
	Date        string `thrift:"Date,1" form:"Date" json:"Date" query:"Date"`
	Name        string `thrift:"Name,2" form:"Name" json:"Name" query:"Name"`
	Description string `thrift:"Description,3" form:"Description" json:"Description" query:"Description"`
}

func NewIDLEntity() *IDLEntity {
	return &IDLEntity{}
}

func (p *IDLEntity) GetDate() (v string) {
	return p.Date
}

func (p *IDLEntity) GetName() (v string) {
	return p.Name
}

func (p *IDLEntity) GetDescription() (v string) {
	return p.Description
}

func (p *IDLEntity) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IDLEntity(%+v)", *p)
}

type EmptyReq struct {
}

func NewEmptyReq() *EmptyReq {
	return &EmptyReq{}
}

func (p *EmptyReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmptyReq(%+v)", *p)
}

type NameBasedReq struct {
	Name string `thrift:"Name,1" json:"Name" query:"name"`
}

func NewNameBasedReq() *NameBasedReq {
	return &NameBasedReq{}
}

func (p *NameBasedReq) GetName() (v string) {
	return p.Name
}

func (p *NameBasedReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NameBasedReq(%+v)", *p)
}

type QueryResp struct {
	Ls []*IDLEntity `thrift:"Ls,1" form:"Ls" json:"Ls" query:"Ls"`
}

func NewQueryResp() *QueryResp {
	return &QueryResp{}
}

func (p *QueryResp) GetLs() (v []*IDLEntity) {
	return p.Ls
}

func (p *QueryResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryResp(%+v)", *p)
}

type AddReq struct {
	Name        string `thrift:"Name,1" form:"Name" json:"Name" query:"Name"`
	Description string `thrift:"Description,2" form:"Description" json:"Description" query:"Description"`
	Data        []byte `thrift:"Data,3" form:"Data" json:"Data" query:"Data"`
}

func NewAddReq() *AddReq {
	return &AddReq{}
}

func (p *AddReq) GetName() (v string) {
	return p.Name
}

func (p *AddReq) GetDescription() (v string) {
	return p.Description
}

func (p *AddReq) GetData() (v []byte) {
	return p.Data
}

func (p *AddReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddReq(%+v)", *p)
}

type CommonResp struct {
	Message string `thrift:"Message,1" form:"Message" json:"Message" query:"Message"`
}

func NewCommonResp() *CommonResp {
	return &CommonResp{}
}

func (p *CommonResp) GetMessage() (v string) {
	return p.Message
}

func (p *CommonResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommonResp(%+v)", *p)
}

type DownloadResp struct {
	Data []byte `thrift:"Data,1" form:"Data" json:"Data" query:"Data"`
}

func NewDownloadResp() *DownloadResp {
	return &DownloadResp{}
}

func (p *DownloadResp) GetData() (v []byte) {
	return p.Data
}

func (p *DownloadResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DownloadResp(%+v)", *p)
}

type ManageService interface {
	SelectAll(ctx context.Context, req *EmptyReq) (r *QueryResp, err error)

	SelectByName(ctx context.Context, req *NameBasedReq) (r *QueryResp, err error)

	AddByName(ctx context.Context, req *AddReq) (r *CommonResp, err error)

	DeleteByName(ctx context.Context, req *NameBasedReq) (r *CommonResp, err error)

	DownloadByName(ctx context.Context, req *NameBasedReq) (r *DownloadResp, err error)
}
